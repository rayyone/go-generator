package userctl

import (
	"github.com/gin-gonic/gin"
	contRequest "<%= appModName %>/app/foundation/container"
	"<%= appModName %>/app/domain/user/request"
	usertfm "<%= appModName %>/app/domain/user/tfm"
	"<%= appModName %>/app/errcode"
	basectl "<%= appModName %>/app/foundation/controller/base"
	"<%= appModName %>/app/foundation/service/container"
	basetfm "<%= appModName %>/app/foundation/tfm/base"
	"<%= appModName %>/app/helpers/response"
	"<%= appModName %>/app/model"
)

type UserCtl struct {
	*basectl.BaseController
}

func NewUserCtl(service *containersvc.Service) *UserCtl {
	return &UserCtl{
		BaseController: &basectl.BaseController{
			Service: service,
		},
	}
}

// GetMyDetail
// @Security Bearer
// @Summary      Get current logged-in user detail
// @Tags         User
// @Accept       json
// @Produce      json
// @Success      200  {object}   swagger.ResponseWithData{data=usertfm.UserResp}
// @Router       /me [get]
func (ctl *UserCtl) GetMyDetail(c *gin.Context) {
	clientRequest := contRequest.InitRequest(c)
	var user *model.User
	var err error

	user, err = ctl.Service.User.FindWithRolePermissions(clientRequest, clientRequest.UserID)

	if err != nil {
		response.RespondError(c, err)
		return
	}

	res, err := basetfm.TransformOne[model.User, usertfm.UserResp](user)
	if err != nil {
		response.RespondError(c, err)
		return
	}
	response.RespondSuccess(c, res, "")
}

// UpdateMyDetail
// @Security Bearer
// @Summary      Update current user's detail
// @Tags         User
// @Accept       json
// @Produce      json
// @Param        data body  request.UpdateMyDetail  true  "Body params"
// @Success      200  {object}   swagger.ResponseWithData{data=usertfm.UserResp}
// @Router       /me [put]
func (ctl *UserCtl) UpdateMyDetail(c *gin.Context) {
	clientRequest := contRequest.InitRequest(c)
	var requestParams request.UpdateMyDetail
	if err := clientRequest.SetPostParams(&requestParams); err != nil {
		return
	}
	user, err := ctl.Service.User.UpdateMyDetail(clientRequest, clientRequest.UserID, requestParams)
	if err != nil {
		response.RespondError(c, err)
		return
	}

	res, err := basetfm.TransformOne[model.User, usertfm.UserResp](user)
	if err != nil {
		response.RespondError(c, err)
		return
	}
	response.RespondSuccess(c, res, "Your information has been updated successfully")
}

// All
// @Security Bearer
// @Summary      Get all users
// @Tags         User
// @Accept       json
// @Produce      json
// @Param        q	query	string	false	"Search everything"
// @Param        name	query	string	false	"Search in name. Type: ILIKE"
// @Param        email	query	string	false	"Search in email. Type: ILIKE"
// @Param        order_by	query	string	false	"field,direction. Ex: id,desc"
// @Param        page	query	number	false	"Page"
// @Param        limit	query	number	false	"Limit"
// @Success      200  {object}   swagger.PaginatorResponse{data=[]usertfm.UserResp}
// @Router       /users [get]
func (ctl *UserCtl) All(c *gin.Context) {
	clientRequest := contRequest.InitRequest(c)

	users, paginator, err := ctl.Service.User.All(clientRequest)
	if err != nil {
		response.RespondError(c, err)
		return
	}

	res, err := basetfm.TransformSlice[model.User, usertfm.UserResp](users)
	if err != nil {
		response.RespondError(c, err)
		return
	}
	response.RespondSuccessWithPaginator(c, res, paginator, "")
}

// GetByID
// @Security Bearer
// @Summary      Get user by ID
// @Tags         User
// @Accept       json
// @Produce      json
// @Param        id   path      string  true  "User ID"
// @Success      200  {object}   swagger.ResponseWithData{data=usertfm.UserResp}
// @Router       /users/{id} [get]
func (ctl *UserCtl) GetByID(c *gin.Context) {
	userID := c.Param("userID")
	if userID == "" {
		response.RespondError(c, errcode.Validation.New("User id is required!"))
		return
	}
	clientRequest := contRequest.InitRequest(c)
	user, err := ctl.Service.User.Find(clientRequest, userID)
	if err != nil {
		response.RespondError(c, err)
		return
	}
	res, err := basetfm.TransformOne[model.User, usertfm.UserResp](user)
	if err != nil {
		response.RespondError(c, err)
		return
	}
	response.RespondSuccess(c, res, "")
}

// StoreByAdmin
// @Security Bearer
// @Summary      Create a new user by ADMIN
// @Tags         User
// @Accept       json
// @Produce      json
// @Param        data body  request.NewUserByAdmin  true  "Body params"
// @Success      201  {object}   swagger.ResponseWithData{data=usertfm.UserResp}
// @Router       /users [post]
func (ctl *UserCtl) StoreByAdmin(c *gin.Context) {
	clientRequest := contRequest.InitRequest(c)
	if !ctl.HasPermissions(clientRequest, "users.create_update") {
		return
	}
	var params request.NewUserByAdmin
	if err := clientRequest.SetPostParams(&params); err != nil {
		return
	}
	user, err := ctl.Service.User.Store(clientRequest, &params)
	if err != nil {
		response.RespondError(c, err)
		return
	}

	res, err := basetfm.TransformOne[model.User, usertfm.UserResp](user)
	if err != nil {
		response.RespondError(c, err)
		return
	}
	response.RespondCreated(c, res, "User has been added successfully.")
}

// UpdateByAdmin
// @Security Bearer
// @Summary      Update a user by ADMIN
// @Tags         User
// @Accept       json
// @Produce      json
// @Param        data body  request.UpdateByAdmin  true  "Body params; Patch update"
// @Param        id path  string  true  "User ID"
// @Success      200  {object}   swagger.ResponseWithData{data=usertfm.UserResp}
// @Router       /users/{id} [put]
func (ctl *UserCtl) UpdateByAdmin(c *gin.Context) {
	clientRequest := contRequest.InitRequest(c)
	if !ctl.HasPermissions(clientRequest, "users.create_update") {
		return
	}
	userID := c.Param("userID")
	if userID == "" {
		response.RespondError(c, errcode.Validation.New("User id is required!"))
		return
	}

	var params request.UpdateByAdmin
	if err := clientRequest.SetPostParams(&params); err != nil {
		return
	}
	user, err := ctl.Service.User.UpdateByAdmin(clientRequest, userID, params)
	if err != nil {
		response.RespondError(c, err)
		return
	}

	res, err := basetfm.TransformOne[model.User, usertfm.UserResp](user)
	if err != nil {
		response.RespondError(c, err)
		return
	}
	response.RespondSuccess(c, res, "User has been updated successfully.")
}

// Delete
// @Security Bearer
// @Summary      Delete a user
// @Tags         User
// @Accept       json
// @Produce      json
// @Param        id path  string  true  "User ID"
// @Success      201  {object}   swagger.ResponseWithData{data=boolean}
// @Router       /users/{id} [delete]
func (ctl *UserCtl) Delete(c *gin.Context) {
	clientRequest := contRequest.InitRequest(c)
	if !ctl.HasPermissions(clientRequest, "users.delete") {
		return
	}
	userID := c.Param("userID")
	if userID == "" {
		response.RespondError(c, errcode.Validation.New("User id is required!"))
		return
	}

	err := ctl.Service.User.Delete(clientRequest, userID)
	if err != nil {
		response.RespondError(c, err)
		return
	}
	response.RespondSuccess(c, true, "User has been deleted successfully.")
}
