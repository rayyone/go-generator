package userg

import (
	corecontainer "github.com/rayyone/go-core/container"
	"github.com/rayyone/go-core/helpers/pagination"
	corerp "github.com/rayyone/go-core/repositories"
	"github.com/rayyone/go-core/ryerr"
	"gorm.io/gorm"
	"<%= appModName %>/app/domain/user/repo"
	"<%= appModName %>/app/foundation/container"
	baserp "<%= appModName %>/app/foundation/repo/base"
	"<%= appModName %>/app/model"
)

type UserGorm struct {
	*baserp.BaseGormRepository
}

func (g *UserGorm) SkipBaseQuery() userrp.User {
	newGormRepo := NewUserGorm()
	newGormRepo.BaseQuery = func(r corecontainer.RequestInf) *gorm.DB {
		return corerp.DefaultBaseQuery(r)
	}
	return newGormRepo
}

func NewUserGorm() *UserGorm {
	br := baserp.NewBaseGormRepository()
	br.BaseQuery = func(r corecontainer.RequestInf) *gorm.DB {
		return r.GetDBM().GetTx()
	}
	gormUserRepo := &UserGorm{
		BaseGormRepository: br,
	}

	return gormUserRepo
}

func (g *UserGorm) All(r *container.Request) ([]*model.User, *pagination.Paginator, error) {
	var users []*model.User
	var total int64
	tx := g.BaseQuery(r).Preload("Roles")

	if r.UrlParams.Str["q"] != "" {
		queryStr := "%" + r.UrlParams.Str["q"] + "%"
		tx = tx.Where("users.name ILIKE ? OR users.email ILIKE ?", queryStr, queryStr)
	}
	if r.UrlParams.Str["name"] != "" {
		queryStr := "%" + r.UrlParams.Str["name"] + "%"
		tx = tx.Where("users.name ILIKE ?", queryStr)
	}
	if r.UrlParams.Str["email"] != "" {
		queryStr := "%" + r.UrlParams.Str["email"] + "%"
		tx = tx.Where("users.email ILIKE ?", queryStr)
	}
	// {{ry_placeholder:new_props}}

	tx.Model(&model.User{}).Count(&total)

	tx = tx.Order(baserp.GetOrderBy(r.UrlParams.Str, "users.name ASC, users.created_at DESC"))

	err := tx.Offset(r.Pagination.Offset).Limit(r.Pagination.Limit).Find(&users).Error
	if err != nil {
		return nil, nil, ryerr.New(err.Error())
	}
	paginator := pagination.BuildPaginator(total, r.Pagination.Limit, r.Pagination.Offset)
	return users, paginator, err
}

func (g *UserGorm) FindWithPermissions(r *container.Request, user *model.User, id string) error {
	err := g.BaseQuery(r).
		Preload("Roles.Permissions").
		Where("users.id = ?", id).
		Find(user).Error

	return corerp.GetFindByErrorType(err, g.IsDebugging)
}

func (g *UserGorm) FindByEmail(r *container.Request, email string) (*model.User, error) {
	user := &model.User{}
	err := g.BaseQuery(r).
		Where("email ILIKE ?", email).
		First(user).Error
	return user, err
}
