package fileg

import (
	"github.com/rayyone/go-core/container"
	"github.com/rayyone/go-core/helpers/pagination"
	"github.com/rayyone/go-core/repositories"
	"github.com/rayyone/go-core/ryerr"
	"gorm.io/gorm"
	"<%= appModName %>/app/domain/file/repo"
	"<%= appModName %>/app/foundation/container"
	"<%= appModName %>/app/foundation/repo/base"
	"<%= appModName %>/app/model"
)

type FileUploadGorm struct {
	*baserepo.BaseGormRepository
}

func (g *FileUploadGorm) SkipBaseQuery() filerp.FileUpload {
	newGormRepo := NewFileUploadGorm()
	newGormRepo.BaseQuery = func(r corecontainer.RequestInf) *gorm.DB {
		return corerp.DefaultBaseQuery(r)
	}
	return newGormRepo
}

func NewFileUploadGorm() *FileUploadGorm {
	br := baserepo.NewBaseGormRepository()
	br.BaseQuery = func(r corecontainer.RequestInf) *gorm.DB {
		return r.GetDBM().GetTx()
	}
	gormFileUploadRepo := &FileUploadGorm{
		BaseGormRepository: br,
	}

	return gormFileUploadRepo
}

func (g *FileUploadGorm) All(r *container.Request) ([]*model.FileUpload, *pagination.Paginator, error) {
	var res []*model.FileUpload
	var total int64
	tx := g.BaseQuery(r)

	if r.UrlParams.Str["name"] != "" {
		queryStr := r.UrlParams.Str["name"]
		tx = tx.Where("file_uploads.name = ?", queryStr)
	}
	if r.UrlParams.Str["path"] != "" {
		queryStr := r.UrlParams.Str["path"]
		tx = tx.Where("file_uploads.path = ?", queryStr)
	}
	if r.UrlParams.Str["used"] != "" {
		queryStr := r.UrlParams.Str["used"]
		tx = tx.Where("file_uploads.used = ?", queryStr)
	}
	if r.UrlParams.Str["category"] != "" {
		queryStr := r.UrlParams.Str["category"]
		tx = tx.Where("file_uploads.category = ?", queryStr)
	}
	if r.UrlParams.Str["imageable_type"] != "" {
		queryStr := "%" + r.UrlParams.Str["imageable_type"] + "%"
		tx = tx.Where("file_uploads.imageable_type ilike ?", queryStr)
	}
	if r.UrlParams.Str["imageable_id"] != "" {
		queryStr := r.UrlParams.Str["imageable_id"]
		tx = tx.Where("file_uploads.imageable_id = ?", queryStr)
	}
	if r.UrlParams.Str["owner_id"] != "" {
		queryStr := r.UrlParams.Str["owner_id"]
		tx = tx.Where("file_uploads.owner_id = ?", queryStr)
	}
	// {{ry_placeholder:new_props}}

	tx.Model(&model.FileUpload{}).Count(&total)

	tx = tx.Order(baserepo.GetOrderBy(r.UrlParams.Str, &model.FileUpload{}, "created_at DESC"))
	err := tx.Offset(r.Pagination.Offset).Limit(r.Pagination.Limit).Find(&res).Error
	if err != nil {
		return nil, nil, ryerr.New(err.Error())
	}
	paginator := pagination.BuildPaginator(total, r.Pagination.Limit, r.Pagination.Offset)
	return res, paginator, err
}
